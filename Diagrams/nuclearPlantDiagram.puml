@startuml

title ***Simulador de Central Nuclear***

' Planta nuclear
class PlantaNuclear {
    - reactores: Reactor[];
}

'Interfaces generales
interface Encendible {
    + encender();
    + apagar();
}

'Sensor general

interface ISensor {
    + estaEncendido(): boolean;
    + obtenerValores(): number;
}

enum TipoAlerta {
    CRITICA,
    ESTANDAR
}

' Barra de control
enum EstadoBarraDeControl {
    ELIMINADA,
    INSERTADA,
    EN_DESUSO
}

class BarraDeControl {
    - material: string;
    - estado: enumCRodStatus;
    - tiempoVidaUtilTotal: number;
    + obtenerEstado(): string;
    + obtenerTiempoDeVidaRestante(): number;
    + insertarBarra();
    + quitarBarra();
}

' Reactor

enum EstadoReactor {
    ENCENDIDO,
    APAGADO
}

class Reactor implements Encendible {
    - idReactor: string;
    - estado: enumReactorStatus;
    - barrasDeControl: BarraDeControl[];
    - sistemaDeRefrigeracion: SistemaDeRefrigeracion || null;
    - temperatura: number;
    + encender();
    + apagar();
}

'' Sistema de refrigeración
class SistemaDeRefrigeracion implements Encendible {
    + encender();
    + apagar();
}

class SensorTemperatura implements ISensor {
    ' lee en °C
    + estaEncendido(): boolean;
    + obtenerValores(): number;
}

class SensorProduccionDeEnergia implements ISensor {
    ' lee en watts
    + estaEncendido(): boolean;
    + obtenerValores(): number;
}

' Easter egg...

class Chernobyl {
    + explotar();
}

@enduml

'Cambios sugeridos en PR
'- establecer relaciones entre clases
'- cambiar nombre propiedad barra de control (remainingRodLifePct => totalRodLife), el % lo podemos resolver un método que lo calcule en base al tiempo
'- agregar clases de turbinas, condensador y generador (y alguna otra de la base de funcionamiento si consideramos que es necesaria)
'- agregar Clase operador
' agregar Interface común entre los mecanismos de control (sensor de temperatura, barras de control y turbinas de refrigeración)