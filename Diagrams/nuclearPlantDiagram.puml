@startuml

title ***Central Nuclear***

' Planta nuclear
class PlantaNuclear {
    - reactores: Reactor[];
    - operadores: Operador[];
}

' Reactor
class Reactor implements Encendible {
    - idReactor: string;
    - estado: EstadoReactor;
    - barrasDeControl: BarraDeControl[];
    - mecanimosDeControl: IMecanismoDeControl[];
    - sensores: ISensor[];
    - temperatura: number;
    + encender();
    + apagar();
}

enum EstadoReactor {
    ENCENDIDO,
    APAGADO
}

enum TipoAlerta {
    CRITICA,
    ESTANDAR
}

' Operador
class Operador {
    + iniciarReaccion(reactor: Reactor) : void
    + mantenerReaccion(reactor: Reactor) : void
    + detenerReaccion(reactor: Reactor) : void
}

'Interfaces generales
interface Encendible {
    + encender();
    + apagar();
    + estaEncendido(): boolean;
}

interface Activable {
    + estaActivo(): boolean;
    + activar();
    + desactivar();
}


'Sensores
interface ISensor implements Activable {
    + estaActivo(): boolean;
    + activar();
    + desactivar();
    + obtenerValores(): number;
}

class SensorTemperatura implements ISensor {
    ' lee en °C
    + estaActivo(): boolean;
    + activar();
    + desactivar();
    + obtenerValores(): number;
}

class SensorProduccionDeEnergia implements ISensor {
    ' lee en watts
    + estaActivo(): boolean;
    + activar();
    + desactivar();
    + obtenerValores(): number;
}

' Mecanismos de control
interface IMecanismoDeControl implements Activable {
    + estaActivo(): boolean;
    + activar();
    + desactivar();
}

'' Barra de control
class BarraDeControl implements IMecanismoDeControl {
    - material: string;
    - estado: EstadoBarraDeControl;
    - tiempoVidaUtilTotal: number;
    + estaActivo(): boolean;
    'insertar barra
    + activar(); 
    ' quitar barra
    + desactivar(); 
    + obtenerEstado(): string;
    + obtenerTiempoDeVidaRestante(): number;
}

enum EstadoBarraDeControl {
    ELIMINADA,
    INSERTADA,
    EN_DESUSO
}

'' Turbina de refrigeración
class TurbinaDeRefrigeracion implements IMecanismoDeControl {
    + estaActivo(): boolean;
    + activar(); 
    + desactivar(); 
}


' Easter egg...

class Chernobyl {
    + explotar();
}

'Relaciones
Reactor -u-o PlantaNuclear
Operador -l-o PlantaNuclear

@enduml

'Cambios sugeridos en PR
'- establecer relaciones entre clases
'- cambiar nombre propiedad barra de control (remainingRodLifePct => totalRodLife), el % lo podemos resolver un método que lo calcule en base al tiempo
'- agregar clases de turbinas, condensador y generador (y alguna otra de la base de funcionamiento si consideramos que es necesaria)
'- agregar Clase operador
' agregar Interface común entre los mecanismos de control (sensor de temperatura, barras de control y turbinas de refrigeración)