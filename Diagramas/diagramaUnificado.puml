@startuml TP

title "Central Nuclear"
!theme reddress-darkblue
scale 1.3

skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBorderColor skyBlue
skinparam titleBackgroundColor #96a2ff


package CentralNuclear {


' Planta nuclear
class PlantaNuclear {
    - reactores: Reactor[];
    - SistemaDeControl: software;
}

' Reactor
class Reactor{
    - idReactor: string;
    - _estado: EstadoReactor;
    - mecanimosDeControl: IMecanismoDeControl[];
    - sensores: ISensor[];
    - temperatura: number;
    + getters();
    + setters();
    + encender(): void;
    + apagar(): void;
    + getTemperatura(): number;
    + actualizarTemperatura(): void;
    + setTemperatura(temperatura: number): void;
    + getIdReactor(): string;
    + getEstado();
    + cambiarEstado(IEstadoReactor state ): void;
    + agregarMecanismoDeControl(mecanismoDeControl: IMecanismoDeControl): void;
    + eliminarMecanismoDeControl(mecanismoDeControl: IMecanismoDeControl): void;
    + agregarSensor(sensor: ISensor): void;
    + eliminarSensor(sensor: ISensor): void;
    + notificarSensores(): void;
}

abstract class IEstadoReactor {
    # static readonly INCREMENTO_POR_MINUTO;
    # contexto: Reactor;
    + IEstadoReactor();
    + abstract calcularEnergia(temperatura: number): number;
    + abstract encender(): void;
    + abstract apagar(): void;
    + abstract estaEncendido(): boolean;
    + cargaContexto(context): void;
    + incrementarTemperatura(): void;
    + abstract verificaEstado(): void;
}

class ChernobyL
{
    + calcularEnergia(temperatura: number = 0): number;
    + verificaEstado(): void;
    + encender();
    + apagar();
    + estaEncendido();
}

class RApagado
{
    + calcularEnergia(temperatura: number = 0): number;
    + verificaEstado(): void;
    + encender();
    + apagar();
    + estaEncendido();
    + incrementarTemperatura(): void;
}

class RCritico
{
    + calcularEnergia(temperatura: number = 0): number;
    + verificaEstado(): void;
    - pasaAEstadoNormal();
    - pasaAEstadoEmergencia();
    + encender();
    + apagar();
    + estaEncendido();
}

class REmergencia
{
    + calcularEnergia(temperatura: number = 0): number;
    + verificaEstado(): void;
    - pasaAEstadoCritico();
    - pasaAEstadoChernobyl();
    + encender();
    + apagar();
    + estaEncendido();
}

class REncenciendo
{
    + calcularEnergia(temperatura: number = 0): number;
    + verificaEstado(): void;
    - pasaAEstadoNormal();
    + encender();
    + apagar();
    + estaEncendido();
}

class RNormal
{
    + calcularEnergia(temperatura: number = 0): number;
    + verificaEstado(): void;
    - pasaAEstadoCritico();
    + encender();
    + apagar();
    + estaEncendido();
}

'Interfaces generales
interface IEncendible {
    + encender();
    + apagar();
    + estaEncendido(): boolean;
}

interface IActivable {
    + estaActivo(): boolean;
    + activar();
    + desactivar();
}


'Sensores
interface ISensor{
    + estaActivo(): boolean;
    + activar();
    + desactivar();
    + obtenerValores(): number;
}

class SensorTemperatura{
    ' lee en °C
    + estaActivo(): boolean;
    + activar();
    + desactivar();
    + obtenerValores(): number;
}

class SensorProduccionDeEnergia {
    ' lee en watts
    + estaActivo(): boolean;
    + activar();
    + desactivar();
    + obtenerValores(): number;
}

' Mecanismos de control
interface IMecanismoDeControl{
    + estaActivo(): boolean;
    + activar();
    + desactivar();
}

'' Barra de control
class BarraDeControl implements IMecanismoDeControl {
    - _material: string;
    - _estado: EstadoBarraDeControl;
    - _tiempoVidaUtilTotal: number;
    + constructor();
    + estaActivo(): boolean;
    'insertar barra
    + activar();
    ' quitar barra
    + desactivar();
    + getters();
    + setters();
    - calcPctBarra(): number;
    - revisaSiPuedeActivar(): boolean;

}

enum EstadoBarraDeControl {
    ELIMINADA,
    INSERTADA,
    EN_DESUSO
}

'' Turbina de refrigeración
class TurbinaDeRefrigeracion implements IMecanismoDeControl {
    + estaActivo(): boolean;
    + activar();
    + desactivar();
}


' Easter egg...

class Chernobyl {
    + explotar();
}

'Relaciones
Reactor --------r-o PlantaNuclear
Reactor *..... ISensor
Reactor *...l... IMecanismoDeControl
IActivable -[hidden]r- IMecanismoDeControl
IActivable -[hidden]l- ISensor
IEstadoReactor o---- Reactor
IEstadoReactor  <|-l- ChernobyL
IEstadoReactor  <|-r- RCritico
IEstadoReactor  <|-d- REmergencia
IEstadoReactor  <|-d- RNormal
IEstadoReactor  <|-u- REncenciendo
IEstadoReactor  <|-u- RApagado
Reactor  <.... IEncendible
ISensor <|.l. SensorProduccionDeEnergia
ISensor <|.. SensorTemperatura
ISensor <|........ IActivable
IMecanismoDeControl <|........ IActivable


'Notas
note bottom of SensorTemperatura: "Retorna la temperatura"
note left of SensorProduccionDeEnergia: "Retorna la producción de energía"
note bottom of BarraDeControl: "Retorna el estado de la barra"
note bottom of BarraDeControl: "Retorna el tiempo de vida restante de la barra"
note bottom of TurbinaDeRefrigeracion: "Retorna si la turbina está activa o no"
note bottom of Chernobyl: "¡BOOM! (Easter Egg)"
note right of PlantaNuclear: "Contiene los reactores y operadores de la central\nCambio tentativo: Singleton"
note right of IMecanismoDeControl: "Interfaz común para los mecanismos de control\nque serán utilizados para controlar la temperatura del reactor y enfriarReactor() va a ser llamado por activar() para bajar la temperatura del Reactor"
}

package SistemaDeControl {

' Procesamiento de Datos
class ComprobadorSaludReactor {
    -generadorDeAlertas: GeneradorDeAlertas;
    -setGenerador(g: GeneradorDeAlertas)
    - estaEncendido(reactor: Reactor): boolean;
    - tieneTemperaturaSegura(reactor: Reactor): boolean;
    - produceEnergiaEnRango(reactor: Reactor): boolean;
    +lanzarAlerta();
}

class SistemaDeControl
{
    - operadores: Operador[];
}

' Operador
class Operador {
}

note bottom of ComprobadorSaludReactor
    Clase que se encarga de verificar el estado del reactor
    y lanzar alertas en caso de que algo no este funcionando
    correctamente.
    Según el resultado de tieneTemperaturaSegura() se va a
    setear un generador de alertas u otro
end note

' Acciones automáticas de seguridad
class ModuloAccionAutomaticaSeguridad {
    + apagarPorEmergencia(A: Alerta);
}

' Interfaz humana

'' Manejo de alertas
enum TipoAlerta {
    CRITICA,
    ESTANDAR
}

interface GeneradorDeAlertas {
    +generarAlerta(): IAlerta
}

class GeneradorDeAlertasCriticas implements GeneradorDeAlertas {
    +generarAlerta(): IAlerta
}

class GeneradorDeAlertasEstandar implements GeneradorDeAlertas {
    +generarAlerta(): IAlerta
}

interface Alerta {
    + obtenerTipoDeAlerta(): enumTipoAlerta;
    + obtenerMensajeDeAlerta(): string;
    + obtenerTimestampDeAlerta(): Date;
}

class AlertaCritica implements Alerta {
    + obtenerTipoDeAlerta(): enumTipoAlerta;
    + obtenerMensajeDeAlerta(): string;
    + obtenerTimestampDeAlerta(): Date;

}

class AlertaEstandar implements Alerta {
    + obtenerTipoDeAlerta(): enumTipoAlerta;
    + obtenerMensajeDeAlerta(): string;
    + obtenerTimestampDeAlerta(): Date;
}

class NotificadorDeAlerta {
    + notificarAlerta(alerta:Alerta): string;
}


'' Manejo de comandos
enum ComandosDisponibles {
    BARRA_CONTROL
    REACTOR,
    REFRIGERACION,
    SENSOR_TEMPERATURA,
    SENSOR_NIVEL_AGUA,
    REPORTAR_ESTADO
}

class Comando {
    -estado: ComandosDisponibles

    +setComando(e: ComandosDisponibles)
}

class InterpreteDeComandos {
    - lanzarAccion();
    + interpretarComando(c: Comando);
}

' Acciones
interface Accion {

}

'' Barras de control
class ManejadorDeBarraDeControl implements Accion {
    + obtenerBarrasDisponibles(): BarraDeControl[];
    + insertarBarra();
    + quitarBarra();
}

' Relaciones
NotificadorDeAlerta .l.> Alerta
TipoAlerta -[hidden]u- NotificadorDeAlerta
ComprobadorSaludReactor *-r- GeneradorDeAlertas
GeneradorDeAlertas -[hidden]r- Alerta
SistemaDeControl o--- Operador

}


ComprobadorSaludReactor -r-* PlantaNuclear

note bottom of Operador: "El reactor va a iniciar apagado, \nal iniciar reaccion cambiamos la \npropiedad EstaEncendido a true"
note bottom of Operador: "Mantener: verificar que los mecanismos \nse activen bajo las condiciones especificadas"

@enduml

'Cambios sugeridos en PR
'- establecer relaciones entre clases
'- cambiar nombre propiedad barra de control (remainingRodLifePct => totalRodLife), el % lo podemos resolver un método que lo calcule en base al tiempo
'- agregar clases de turbinas, condensador y generador (y alguna otra de la base de funcionamiento si consideramos que es necesaria)
'- agregar Clase operador
' agregar Interface común entre los mecanismos de control (sensor de temperatura, barras de control y turbinas de refrigeración)
