@startuml Tp

title "Sistema de control Central Nuclear"
!theme reddress-darkblue
scale 1.3
skinparam Linetype ortho

skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBorderColor skyBlue
skinparam titleBackgroundColor #96a2ff



interface Command {
    +ejecutar(r: Reactor): void
}

class ApagarReactor {
    +ejecutar(r: Reactor): void
}

class EncenderReactor {
    +ejecutar(r: Reactor): void
}

class InsertarBarraDeControl {
    +ejecutar(r: Reactor): void
}

class ObtenerInformacionReactor {
    +ejecutar(r: Reactor): void
}

class ReportarEstado {
    +ejecutar(r: Reactor): void
}

class SacarBarraDeControl {
    +ejecutar(r: Reactor): void
}

class RegistroComandosDisponibles {
    -static _instancia: RegistroComandosDisponibles;
    -mapaRegistros: Map<String, Command>;
    
    +constructor();
    +static get instancia(): RegistroComandosDisponibles;
    +insertarCommand(nombreDelComando: String, command: Command): void;
    +obtenerCommands(): Map<String, Command>;
}

abstract class Alerta {
    #tipoAlerta: TipoAlerta;
    #date: Date;
    #suscriptores: IEmpleado[];

    +constructor(tipoAlerta: TipoAlerta)
    +abstract obtenerMensajeDeAlerta(): String;
    +getTipoAlerta(): TipoAlerta;
    +setTipoAlerta(value: TipoAlerta);
    +getDate(): Date;
    +setDate(value: Date);
    +toString(): String;
    +agregarSuscriptor(suscriptor: IEmpleado): void;
    +removerSuscriptor(suscriptor: IEmpleado): void;
    +notificar(): void;
}

class AlertaApagado {
    -static instance: AlertaApagado;

    -constructor(TipoAlerta: TipoAlerta);
    +static getInstance(): AlertaApagado;
    +obtenerMensajeDeAlerta(): String;
}

class AlertaCritica {
    -static instance: AlertaCritica;

    -constructor(TipoAlerta: TipoAlerta);
    +static getInstance(): AlertaCritica;
    +obtenerMensajeDeAlerta(): String;
}

class AlertaEstandar {
    -static instance: AlertaEstandar;

    -constructor(TipoAlerta: TipoAlerta);
    +static getInstance(): AlertaEstandar;
    +obtenerMensajeDeAlerta(): String;
}

interface IGeneradorDeAlertas {

}

class GeneradorAlertaApagado {
    +static generarAlerta(): Alerta;
}

class GeneradorAlertaCritica {
    +static generarAlerta(): Alerta;
}

class GeneradorAlertaEstandar {
    +static generarAlerta(): Alerta;
}

enum TipoAlerta {
    CRITICA,
    ESTANDAR,
    APAGADO,
}

interface Empleado {
    +notificar(a: Alerta): void;
}

class Operario {
    -nombre : String;
    -reactor: Reactor;

    +constructor(reactor: Reactor, nombre : String);
    +realizarOperacion(r: Reactor): void;
    +notificar(a: Alerta): void;
}

class Supervisor {
    +notificar(a: Alerta): void;
}

class Sistema {
    -plantaNuclear: PlantaNuclear;

    +constructor(plantaNuclear: PlantaNuclear);
    +cargarPlanta(planta: PlantaNuclear): void;
    +obtenerPlanta(): PlantaNuclear;
    +actualizar(r: Reactor): void;
    +actualizarTodo(): void;
    +init(): void;
}

interface Registro {
    +insertarRegistro(registro: number): void;
    +obtenerRegistros(): Map<Date, number>;
}

class RegistroEstados {
    -static instancia: RegistroEstados;
    -contadorCambiosEstado: Map<EstadoReactor, number>;

    -constructor();
    +static getInstancia(): RegistroEstados;
    +aumentarRegistro(estado: EstadoReactor): void;
}

class RegistroEnergiaGenerada {
    -static instancia: RegistroEnergiaGenerada;
    -mapaRegistros: Map<Date, number>;

    -constructor();
    +static getInstancia(): RegistroEnergiaGenerada;
    +insertarRegistro(energiaProducida: number): void;
    +obtenerRegistros(): Map<Date, number>;
}

class RegistroBarrasUsadas {
    -static instancia: RegistroBarrasUsadas;
    -mapaRegistros: Map<Date, number>;

    -constructor();
    +static getInstancia(): RegistroBarrasUsadas;
    +insertarRegistro(barrasUsadas: number): void;
    +obtenerRegistros(): Map<Date, number>;
}

' Relaciones

Operario ----> Command

Alerta <|-- AlertaApagado
Alerta <|-- AlertaCritica
Alerta <|-- AlertaEstandar
Alerta -l[hidden]- TipoAlerta
Alerta <-- Empleado

Command <|.. ApagarReactor
Command <|.. EncenderReactor
Command <|.. InsertarBarraDeControl
Command <|.. ObtenerInformacionReactor
Command <|.. ReportarEstado
Command <|.. SacarBarraDeControl

IGeneradorDeAlertas <|.u. GeneradorAlertaApagado
IGeneradorDeAlertas <|.u. GeneradorAlertaCritica
IGeneradorDeAlertas <|.u. GeneradorAlertaEstandar

GeneradorAlertaApagado -u-> AlertaApagado
GeneradorAlertaCritica -u-> AlertaCritica
GeneradorAlertaEstandar -u-> AlertaEstandar

Empleado <|.. Operario
Empleado <|.. Supervisor

Registro <|.. RegistroEnergiaGenerada
Registro <|.. RegistroBarrasUsadas
RegistroEstados -d[hidden]- Registro
RegistroComandosDisponibles --> Command

@enduml