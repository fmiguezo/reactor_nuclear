@startuml Tp

title "Central Nuclear"
!theme reddress-darkblue
scale 1.3
skinparam Linetype ortho

title *Central Nuclear*
skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBorderColor skyBlue
skinparam titleBackgroundColor #96a2ff



abstract class EstadoBarraDeControl {
    #BarraControl: BarraControl;

    +abstract estaActivo(): boolean;
    +abstract activar(): void;
    +abstract desactivar(): void;
    +abstract calcPctBarra(): number;
}

class Eliminada {
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
    +calcPctBarra(): number;
}

class EnDesuso {
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
    +calcPctBarra(): number;
}

class Insertada {
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
    +calcPctBarra(): number;
}

abstract class FabricaBarra {
    +abstract crearBarra(): BarraControl;
}

class FabricaBarraCadmio {
    +crearBarra(): BarraControl;
}

class SelectorFabricaBarras {
    -mapaFabricas: Map<string, FabricaBarra>;
    -static instancia: SelectorFabricaBarra;

    +constructor();
    +getFabrica(nombre: string): FabricaBarra;
    +static getInstancia(): SelectorFabricaBarra;
}

abstract class BarraControl {
    #estado: EstadoBarraControl;
    #vidaUtilRestante: number;

    +constructor(tiempoVidaUtilTotal: number, estado: EstadoBarraControl)
    +estaActivo(): boolean;
    +getPctBarra(): number;
    +getEstado(): EstadoBarraControl;
    +getVidaUtilRestante(): number;
    +setVidaUtilRestante(valor: number);
    +cambiarEstado(state: EstadoBarraControl): void;
    +activar(): void;
    +desactivar(): void;
}

class BarraControlCadmio {
    +constructor(tiempoVidaUtilTotal: number, estado: EstadoBarraControl)
}

interface Activable {
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
}

interface Encendible {
    +encender(): void;
    +apagar(): void;
    +estaEncendido(): boolean;
}

interface MecanismoDeControl {

}

interface Sensor {
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
    +actualizar(reactor: Reactor): void;
    +obtenerValor(): number;
}

class Reactor {
    -estado: IEstadoReactor;
    -mecanimosDeControl: IMecanismoDeControl[];
    -barrasControl: BarraControl[];
    -sensores: ISensor[];
    -temperatura: number;
    -administradorBarras: AdministradorBarras;
    -plantaNuclear: PlantaNuclear;

    +encender(): void;
    +apagar(): void;
    +estaEncendido(): boolean;
    +getEstado(): IEstadoReactor;
    +setEstado(value: IEstadoReactor);
    +getTemperatura(): number;
    +setTemperatura(temperatura: number): void;
    +getBarrasDeControl(): BarraControl[];
    +setBarrasDeControl(bc: BarraControl[]);
    +actualizarTemperatura(): void;
    +obtenerEnergiaTermal(): number;
    +obtenerEnergiaNeta(): number;
    +cambiarEstado(state: IEstadoReactor): void;
    +agregarMecanismoDeControl(mecanismoDeControl: IMecanismoDeControl): void;
    +eliminarMecanismoDeControl(mecanismoDeControl: IMecanismoDeControl): void;
    +agregarSensor(sensor: ISensor): void;
    +eliminarSensor(sensor: ISensor): void;
    +getSensores(): ISensor[];
    +notificarSensores(): void;
    +calcularTemperatura(): void;
    +getAdministradorBarras(): AdministradorBarras;
    +setAadministradorBarras(componente: AdministradorBarras);
    +setPlantaNuclear(plantaNuclear: PlantaNuclear);
}

class AdministradorBarras {
    -reactor: Reactor;

    +set reactor(r: Reactor);
    -retreiveColeccionBarras(): BarraControl[];
    +getBarrasInsertadas(): BarraControl[];
    +getBarrasEnDesuso(): BarraControl[];
    +getBarrasVencidas(): BarraControl[];
    -removerBarras(barras: BarraControl[]): void;
    -agregarBarras(barras: BarraControl[]): void;
    -crearBarra(material: string): BarraControl;
    +subirBarras(cantidadInput: number = 0): void;
    +insertarBarras(cantidadInput: number = 0): void;
    +reemplazarBarrasVencidas(material: string);
}



'Relaciones
EstadoBarraDeControl <|-- Eliminada
EstadoBarraDeControl <|-- EnDesuso
EstadoBarraDeControl <|-- Insertada
FabricaBarra <|-- FabricaBarraCadmio
BarraControl <|-- BarraControlCadmio

Activable <|.. MecanismoDeControl
Activable <|.. Sensor


'Notas
note top of EstadoBarraDeControl: "Clase abstracta para los mecanismos de control \nque serÃ¡n utilizados para controlar la temperatura \ndel reactor y enfriarReactor() va a ser llamado por \nactivar() para bajar la temperatura del Reactor"

@enduml


