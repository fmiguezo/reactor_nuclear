@startuml Tp

title "Central Nuclear"
!theme reddress-darkblue
scale 1.3
skinparam Linetype ortho

title *Central Nuclear*
skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBorderColor skyBlue
skinparam titleBackgroundColor #96a2ff



abstract class EstadoBarraDeControl {
    #BarraControl: BarraControl;

    +setBarraControl(barra: BarraControl): void;
    +getBarraControl(): BarraControl;
    +abstract estaActivo(): boolean;
    +abstract activar(): void;
    +abstract desactivar(): void;
    +abstract calcPctBarra(): number;
}

class Eliminada {
    -RegistroBarrasUsadas:Registro;
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
    +calcPctBarra(): number;
    -reportarVencimiento(): void;
}

class EnDesuso {
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
    +calcPctBarra(): number;
}

class Insertada {
    +setBarraControl(barra: BarraControl): void;
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
    +calcPctBarra(): number;
    -actualizarVidaRestanteBarra(): void;
    -calcDiffTiempoActual(): number;
    -crearTimeOut(vidaRestante: number): void;
    -expirar(): void;
}

abstract class FabricaBarra {
    +abstract crearBarra(): BarraControl;
}

class FabricaBarraCadmio {
    +crearBarra(): BarraControl;
}

class SelectorFabricaBarras {
    -mapaFabricas: Map<string, FabricaBarra>;
    -static instancia: SelectorFabricaBarra;

    +constructor();
    +getFabrica(nombre: string): FabricaBarra;
    +static getInstancia(): SelectorFabricaBarra;
}

abstract class BarraControl {
    #estado: EstadoBarraControl;
    #vidaUtilRestante: number;

    +constructor(tiempoVidaUtilTotal: number, estado: EstadoBarraControl)
    +estaActivo(): boolean;
    +getPctBarra(): number;
    +getEstado(): EstadoBarraControl;
    +getVidaUtilRestante(): number;
    +setVidaUtilRestante(valor: number);
    +cambiarEstado(state: EstadoBarraControl): void;
    +activar(): void;
    +desactivar(): void;
}

class BarraControlCadmio {
    +constructor(tiempoVidaUtilTotal: number, estado: EstadoBarraControl)
}

interface Activable {
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
}

interface Encendible {
    +encender(): void;
    +apagar(): void;
    +estaEncendido(): boolean;
}

interface MecanismoDeControl {

}

interface Sensor {
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
    +actualizar(reactor: Reactor): void;
    +obtenerValor(): number;
}

class Reactor {
    -estado: EstadoReactor;
    -mecanimosDeControl: IMecanismoDeControl[];
    -barrasControl: BarraControl[];
    -sensores: ISensor[];
    -temperatura: number;
    -administradorBarras: AdministradorBarras;
    -plantaNuclear: PlantaNuclear;
    -id: number;

    +id(): number;
    +id(value: number);
    +encender(): void;
    +apagar(): void;
    +estaEncendido(): boolean;
    +getEstado(): IEstadoReactor;
    +setEstado(value: IEstadoReactor);
    +getTemperatura(): number;
    +setTemperatura(temperatura: number): void;
    +getBarrasDeControl(): BarraControl[];
    +setBarrasDeControl(bc: BarraControl[]);
    +actualizarTemperatura(): void;
    +obtenerEnergiaTermal(): number;
    +obtenerEnergiaNeta(): number;
    +cambiarEstado(state: IEstadoReactor): void;
    +agregarMecanismoDeControl(mecanismoDeControl: IMecanismoDeControl): void;
    +eliminarMecanismoDeControl(mecanismoDeControl: IMecanismoDeControl): void;
    +agregarSensor(sensor: ISensor): void;
    +eliminarSensor(sensor: ISensor): void;
    +getSensores(): ISensor[];
    +notificarSensores(): void;
    +notificarSistema(): void;
    +calcularTemperatura(): void;
    +getAdministradorBarras(): AdministradorBarras;
    +setAadministradorBarras(componente: AdministradorBarras);
    +setPlantaNuclear(plantaNuclear: PlantaNuclear);
    +getPlantaNuclear(): PlantaNuclear;
    +puedeInsertarBarras(): boolean;
    +desactivarMecanismosDeControl(): void;
    +agregarBarra(barra: BarraControl): void;
}

class AdministradorBarras {
    -reactor: Reactor;

    +setreactor(r: Reactor);
    +getReactor(): Reactor;
    -retreiveColeccionBarras(): BarraControl[];
    +getBarrasInsertadas(): BarraControl[];
    +getBarrasEnDesuso(): BarraControl[];
    +getBarrasVencidas(): BarraControl[];
    +getBarrasTotales(): BarraControl[];
    -removerBarras(barras: BarraControl[]): void;
    -agregarBarras(barras: BarraControl[]): void;
    -crearBarras(num: number, tipo: string): BarraControl[]
    -crearBarra(material: string): BarraControl;
    +cargarBarras(cantBarras: number, tipo: string = "cadmio"): void;
    +subirBarras(cantidadInput: number = 0): void;
    +insertarBarras(cantidadInput: number = 0): void;
    +reemplazarBarrasVencidas(material: string);
}

interface Builder {
    +reset(): void;
    +setAdminBarras(): void;
    +setBarras(): void;
    +setSensores(): void;
    +setPlantaNuclear(plantaNuclear: PlantaNuclear): void;
    +getReactor(): Reactor;
    +setEstadoIncial(): void;
}

class DirectorBuildReactor {
    -builder: IBuilder;
    -plantaNuclear: PlantaNuclear;

    +constructor(builder: IBuilder);
    +cargarPlantaNuclear(plantaNuclear: PlantaNuclear): void;
    +buildReactorNormal(): Reactor;
    +cambiarBuilder(builder: IBuilder): void;
    +getBuilder(): IBuilder;
    +getPlantaNuclear(): PlantaNuclear;
}

class BuilderReactorNormal {
    -nuevoReactor: Reactor;

    +reset(): void;
    +setAdminBarras(): void;
    +setBarras(): void;
    +setSensores(): void;
    +setPlantaNuclear(plantaNuclear: PlantaNuclear): void;
    +getReactor(): Reactor;
    +setEstadoIncial(): void;
}

abstract class EstadoReactor {
    #timerTemp: NodeJS.Timeout | null;
    #reactor: Reactor;

    +constructor(r: Reactor);
    +obtenerEnergiaNeta(): number;
    +abstract encender(): void;
    +abstract apagar(): void;
    +abstract estaEncendido(): boolean;
    +setReactor(reactor: Reactor): void;
    +abstract verificarEstado(): void;
    +generarAlerta(): Alerta | null;
    #crearTimeOutTemp(frecuencia: number): void;
    -resetTimeOutTemp(frecuencia: number): void;
    #eliminarTimeOut(timerCancelar: NodeJS.Timeout | null): void
    +calcValorEnfriamiento(): number;
    +modificarTemperatura(): void;
    +puedeInsertarBarras(): boolean;
}

class Normal {
    -registroEnergia: RegistroEnergiaGenerada;
    -timerGeneracion: NodeJS.Timeout | null;

    +constructor(r: Reactor);
    -resetTimeOutEnergia(frecuencia: number = 30000): void;
    -crearTimeOutEnergia(frecuencia: number = 30000): void;
    +verificarEstado(): void;
    -cambiarAEstadoCritico();
    +encender(): void;
    +apagar(): void;
    +estaEncendido(): boolean;
    +liberarEnergia(): void;
    +toString(): string;
    +puedeInsertarBarras(): boolean;
}

class Encendiendo {
    +constructor(r: Reactor);
    +verificarEstado(): void;
    -cambiarAEstadoNormal();
    +encender(): void;
    +apagar(): void;
    +estaEncendido(): boolean;
    +toString(): string;
    +puedeInsertarBarras(): boolean;
}

class Emergencia {
    +constructor(r: Reactor);
    +verificarEstado(): void;
    -cambiarAEstadoCritico();
    -cambiarAEstadoChernobyl();
    +encender(): void;
    +apagar(): void;
    +estaEncendido(): boolean;
    +generarAlerta(): Alerta;
    +toString(): string;
    +obtenerEnergiaNeta(): number;
}

class Critico {
    +constructor(r: Reactor);
    -resetTimeOutEnergia(frecuencia: number): void;
    +crearTimeOut(frecuencia: number): void;
    +verificarEstado(): void;
    -cambiarAEstadoNormal();
    -cambiarAEstadoEmergencia();
    +encender(): void;
    +apagar(): void;
    +estaEncendido(): boolean;
    +generarAlerta(): Alerta;
    +liberarEnergia(): void;
    +obtenerEnergiaNeta(): number;
    +toString(): string;
}

class Chernobyl {
    +constructor(r: Reactor);
    +obtenerEnergiaNeta(): number;
    +verificarEstado(): void;
    +encender(): void;
    +apagar(): void;
    +estaEncendido(): boolean;
    +toString(): string;
}

class Apagado {
    +constructor(r: Reactor);
    +obtenerEnergiaNeta(): number;
    +verificarEstado(): void;
    +encender(): void;
    +apagar(): void;
    +estaEncendido(): boolean;
    +generarAlerta(): Alerta;
    +toString(): string;
    +puedeInsertarBarras(): boolean;
}

class Energia {
    +static calcularEnergiaTermal(temp: number): number;
    +static calcularEnergiaNeta(energiaTermal: number): number;
}

class SensorProduccionEnergia {
    -activo: boolean;
    -energiaProducida: number;

    +getActivo(): boolean;
    +setActivo(value: boolean): void;
    +setEnergiaProducida(value: number): void;
    +obtenerValor(): number;
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
    +actualizar(reactor: Reactor): void;
    +toString(): string;
}

class SensorTemperatura {
    -activo: boolean;
    -ultimaTemperatura: number;

    +get activo(): boolean};
    +set activo(value: boolean): void;
    +set ultimaTemperatura(value: number): void;
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
    +actualizar(reactor: Reactor): void;
    +obtenerValor(): number;
    +toString(): string;
}

class PlantaNuclear {
    -reactores: Map<number, Reactor> = new Map();
    -sistema!: Sistema;

    +getreactores(): Reactor[] ;
    +getsistema(): Sistema;
    +cargarSistema(sistema: Sistema): void;
    +agregarReactores(reactores: Reactor[]): void;
}

class ComprobadorSalud {
    -estaEncendido(reactor: Reactor): boolean;
    -tieneTemperaturaSegura(reactor: Reactor): boolean;
    -produceEnergiaEnRango(reactor: Reactor): boolean;
}

class modEmergencIA {
    -static _instancia: modEmergencIA;

    +static get instancia(): modEmergencIA;
    +AZ5(reactor: Reactor): void;
}


'Relaciones
EstadoBarraDeControl <|-- Eliminada
EstadoBarraDeControl <|-- EnDesuso
EstadoBarraDeControl <|-- Insertada
EstadoBarraDeControl .l.|> MecanismoDeControl
FabricaBarra <|-- FabricaBarraCadmio
BarraControl <|-l- BarraControlCadmio
FabricaBarraCadmio --> BarraControlCadmio
SelectorFabricaBarras -l-> FabricaBarra
AdministradorBarras --> BarraControl
Activable <|...... MecanismoDeControl
Activable <|.. Sensor
PlantaNuclear -[hidden]r- modEmergencIA
Builder <|.. BuilderReactorNormal
DirectorBuildReactor -u-> Builder

EstadoReactor <|- Normal
EstadoReactor <|- Encendiendo
EstadoReactor <|- Emergencia
EstadoReactor <|- Critico
EstadoReactor <|- Chernobyl
EstadoReactor <|- Apagado

Sensor <|.u. SensorProduccionEnergia
Sensor <|.l. SensorTemperatura

Reactor -r-o PlantaNuclear
Reactor *.... Sensor
Reactor *.. MecanismoDeControl
EstadoReactor ---o Reactor
Encendible  <|.r. Reactor
ComprobadorSalud -d[hidden]- Encendible
DirectorBuildReactor -r[hidden]- Encendible
Energia -d[hidden]- PlantaNuclear

Activable -[hidden]r- MecanismoDeControl
Activable -[hidden]l- Sensor
note bottom of SensorTemperatura: "Retorna la temperatura"
note left of SensorProduccionEnergia: "Retorna la producción de energía"
note bottom of BarraControl: "Retorna el estado de la barra"
note bottom of BarraControl: "Retorna el tiempo de vida restante de la barra"
note right of Chernobyl: "¡BOOM! (Easter Egg)"
note right of PlantaNuclear: "Contiene los reactores y el software que contiene los operadores"
note top of EstadoBarraDeControl: "Clase abstracta para los mecanismos de control \nque serán utilizados para controlar la temperatura \ndel reactor y enfriarReactor() va a ser llamado por \nactivar() para bajar la temperatura del Reactor"



@enduml
