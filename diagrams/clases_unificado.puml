@startuml TP

title "Central Nuclear"
!theme reddress-darkblue
scale 1.3

skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBorderColor skyBlue
skinparam titleBackgroundColor #96a2ff


package CentralNuclear {


' Planta nuclear
class PlantaNuclear {
    - reactores: Reactor[];
    - Software: software;
}

' Reactor
class Reactor{
    - idReactor: string;
    - _estado: EstadoReactor;
    - mecanimosDeControl: IMecanismoDeControl[];
    - sensores: ISensor[];
    - temperatura: number;
    + getters();
    + setters();
    + encender(): void;
    + apagar(): void;
    + getTemperatura(): number;
    + actualizarTemperatura(): void;
    + setTemperatura(temperatura: number): void;
    + getIdReactor(): string;
    + getEstado();
    + cambiarEstado(IEstadoReactor state ): void;
    + agregarMecanismoDeControl(mecanismoDeControl: IMecanismoDeControl): void;
    + eliminarMecanismoDeControl(mecanismoDeControl: IMecanismoDeControl): void;
    + agregarSensor(sensor: ISensor): void;
    + eliminarSensor(sensor: ISensor): void;
    + notificarSensores(): void;
}

abstract class IEstadoReactor {
    # static readonly INCREMENTO_POR_MINUTO;
    # contexto: Reactor;
    + IEstadoReactor();
    + abstract calcularEnergia(temperatura: number): number;
    + abstract encender(): void;
    + abstract apagar(): void;
    + abstract estaEncendido(): boolean;
    + cargaContexto(context): void;
    + incrementarTemperatura(): void;
    + abstract verificaEstado(): void;
}

class ChernobyL
{
    + calcularEnergia(temperatura: number = 0): number;
    + verificaEstado(): void;
    + encender();
    + apagar();
    + estaEncendido();
}

class RApagado
{
    + calcularEnergia(temperatura: number = 0): number;
    + verificaEstado(): void;
    + encender();
    + apagar();
    + estaEncendido();
    + incrementarTemperatura(): void;
}

class RCritico
{
    + calcularEnergia(temperatura: number = 0): number;
    + verificaEstado(): void;
    - pasaAEstadoNormal();
    - pasaAEstadoEmergencia();
    + encender();
    + apagar();
    + estaEncendido();
}

class REmergencia
{
    + calcularEnergia(temperatura: number = 0): number;
    + verificaEstado(): void;
    - pasaAEstadoCritico();
    - pasaAEstadoChernobyl();
    + encender();
    + apagar();
    + estaEncendido();
}

class REncenciendo
{
    + calcularEnergia(temperatura: number = 0): number;
    + verificaEstado(): void;
    - pasaAEstadoNormal();
    + encender();
    + apagar();
    + estaEncendido();
}

class RNormal
{
    + calcularEnergia(temperatura: number = 0): number;
    + verificaEstado(): void;
    - pasaAEstadoCritico();
    + encender();
    + apagar();
    + estaEncendido();
}

'Interfaces generales
interface IEncendible {
    + encender();
    + apagar();
    + estaEncendido(): boolean;
}

interface IActivable {
    + estaActivo(): boolean;
    + activar();
    + desactivar();
}


'Sensores
interface ISensor{
    + estaActivo(): boolean;
    + activar();
    + desactivar();
    + actualizar(reactor: Reactor): void;
    + obtenerValor(): number;
}

class SensorTemperatura{
    ' lee en °C
    + estaActivo(): boolean;
    + activar();
    + desactivar();
    + actualizar(reactor: Reactor): void;
    + obtenerValor(): number;
}

class SensorProduccionDeEnergia {
    ' lee en watts
    + estaActivo(): boolean;
    + activar();
    + desactivar();
    + actualizar(reactor: Reactor): void;
    + obtenerValor(): number;
}

' Mecanismos de control
interface IMecanismoDeControl{
    + estaActivo(): boolean;
    + activar();
    + desactivar();
}

'' Barra de control
class BarraDeControl implements IMecanismoDeControl {
    - _material: string;
    - _estado: EstadoBarraDeControl;
    - _tiempoVidaUtilTotal: number;
    + constructor();
    + estaActivo(): boolean;
    'insertar barra
    + activar();
    ' quitar barra
    + desactivar();
    + getters();
    + setters();
    - calcPctBarra(): number;
    - revisaSiPuedeActivar(): boolean;

}

abstract class EstadoBarraDeControl {
    #BarraControl: BarraControl;

    +abstract estaActivo(): boolean;
    +abstract activar(): void;
    +abstract desactivar(): void;
    +abstract calcPctBarra(): number;
}

class Eliminada {
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
    +calcPctBarra(): number;
}

class EnDesuso {
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
    +calcPctBarra(): number;
}

class Insertada {
    +estaActivo(): boolean;
    +activar(): void;
    +desactivar(): void;
    +calcPctBarra(): number;
}

'' Turbina de refrigeración
class TurbinaDeRefrigeracion implements IMecanismoDeControl {
    + estaActivo(): boolean;
    + activar();
    + desactivar();
}


' Easter egg...

class Chernobyl {
    + explotar();
}

'Relaciones
EstadoBarraDeControl <|-- Eliminada
EstadoBarraDeControl <|-- EnDesuso
EstadoBarraDeControl <|-- Insertada
Reactor --------r-o PlantaNuclear
Reactor *..... ISensor
Reactor *...l... IMecanismoDeControl
IActivable -[hidden]r- IMecanismoDeControl
IActivable -[hidden]l- ISensor
IEstadoReactor o---- Reactor
IEstadoReactor  <|-u- ChernobyL
IEstadoReactor  <|-u- RCritico
IEstadoReactor  <|-r- REmergencia
IEstadoReactor  <|-u- RNormal
IEstadoReactor  <|-u- REncenciendo
IEstadoReactor  <|-l- RApagado
Reactor  <|.... IEncendible
ISensor <|.l. SensorProduccionDeEnergia
ISensor <|.. SensorTemperatura
ISensor <|........ IActivable
IMecanismoDeControl <|........ IActivable
EstadoBarraDeControl .l.|> IMecanismoDeControl


'Notas
note bottom of SensorTemperatura: "Retorna la temperatura"
note left of SensorProduccionDeEnergia: "Retorna la producción de energía"
note bottom of BarraDeControl: "Retorna el estado de la barra"
note bottom of BarraDeControl: "Retorna el tiempo de vida restante de la barra"
note bottom of TurbinaDeRefrigeracion: "Retorna si la turbina está activa o no"
note bottom of Chernobyl: "¡BOOM! (Easter Egg)"
note right of PlantaNuclear: "Contiene los reactores y el software que contiene los operadores"
note top of EstadoBarraDeControl: "Clase abstracta para los mecanismos de control \nque serán utilizados para controlar la temperatura \ndel reactor y enfriarReactor() va a ser llamado por \nactivar() para bajar la temperatura del Reactor"
}

package Software {
skinparam Linetype ortho

interface Command {
    +ejecutar(comando: Command): void
}

class ApagarReactor {
    +ejecutar(comando: Command): void
}

class EncenderReactor {
    +ejecutar(comando: Command): void
}

class InsertarBarraDeControl {
    +ejecutar(comando: Command): void
}

class ObtenerInformacionReactor {
    +ejecutar(comando: Command): void
}

class ReportarEstado {
    +ejecutar(comando: Command): void
}

class SacarBarraDeControl {
    +ejecutar(comando: Command): void
}

abstract class Alerta {
    #tipoAlerta: TipoAlerta;
    #date: Date;
    #suscriptores: IEmpleado[];

    +constructor(tipoAlerta: TipoAlerta)
    +abstract obtenerMensajeDeAlerta(): String;
    +getTipoAlerta(): TipoAlerta;
    +setTipoAlerta(value: TipoAlerta);
    +getDate(): Date;
    +setDate(value: Date);
    +toString(): String;
    +agregarSuscriptor(suscriptor: IEmpleado): void;
    +removerSuscriptor(suscriptor: IEmpleado): void;
    +notificar(): void;
}

class AlertaApagado {
    -static instance: AlertaApagado;

    -constructor(TipoAlerta: TipoAlerta);
    +static getInstance(): AlertaApagado;
    +obtenerMensajeDeAlerta(): String;
}

class AlertaCritica {
    -static instance: AlertaCritica;

    -constructor(TipoAlerta: TipoAlerta);
    +static getInstance(): AlertaCritica;
    +obtenerMensajeDeAlerta(): String;
}

class AlertaEstandar {
    -static instance: AlertaEstandar;

    -constructor(TipoAlerta: TipoAlerta);
    +static getInstance(): AlertaEstandar;
    +obtenerMensajeDeAlerta(): String;
}

interface IGeneradorDeAlertas {
    
}

class GeneradorAlertaApagado {
    +static generarAlerta(): Alerta;
}

class GeneradorAlertaCritica {
    +static generarAlerta(): Alerta;
}

class GeneradorAlertaEstandar {
    +static generarAlerta(): Alerta;
}

enum TipoAlerta {
    CRITICA,
    ESTANDAR,
    APAGADO,
}

interface Empleado {
    +notificar(a: Alerta): void;
}

class Operario {
    -nombre : String;
    -reactor: Reactor;

    +constructor(reactor: Reactor, nombre : String);
    +realizarOperacion(comando: Command): void;
    +notificar(a: Alerta): void;
}

class Supervisor {
    +notificar(a: Alerta): void;
}

class Sistema {
    -plantaNuclear: PlantaNuclear;

    +constructor(plantaNuclear: PlantaNuclear);
    +cargarPlanta(planta: PlantaNuclear): void;
    +actualizar(r: Reactor): void;
    +actualizarTodo(): void;
    +init(): void;
}


' Relaciones
Command <|.. ApagarReactor
Command <|.. EncenderReactor
Command <|.. InsertarBarraDeControl
Command <|.u. ObtenerInformacionReactor
Command <|.u. ReportarEstado
Command <|.u. SacarBarraDeControl

Operario ----> Command

Alerta <|-- AlertaApagado
Alerta <|-- AlertaCritica
Alerta <|-- AlertaEstandar
Alerta -l[hidden]- TipoAlerta
Alerta <-- Empleado

IGeneradorDeAlertas <|.u. GeneradorAlertaApagado
IGeneradorDeAlertas <|.u. GeneradorAlertaCritica
IGeneradorDeAlertas <|.u. GeneradorAlertaEstandar

GeneradorAlertaApagado -u-> AlertaApagado
GeneradorAlertaCritica -u-> AlertaCritica
GeneradorAlertaEstandar -u-> AlertaEstandar

Empleado <|.. Operario
Empleado <|.. Supervisor
Sistema -r-* PlantaNuclear

@enduml
